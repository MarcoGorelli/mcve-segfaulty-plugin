use crate::business_days::*;
use crate::sub::*;
use polars::prelude::*;
use serde::Deserialize;
use polars::prelude::*;
use polars_plan::dsl::FieldsMapper;
use pyo3_polars::derive::{polars_expr, CallerContext};
use pyo3_polars::export::polars_core::POOL;
use std::fmt::Write;

#[derive(Deserialize)]
pub struct BusinessDayKwargs {
    roll: String,
}

#[polars_expr(output_type=Int32)]
fn advance_n_days(inputs: &[Series], kwargs: BusinessDayKwargs) -> PolarsResult<Series> {
    let s = &inputs[0];
    let roll = kwargs.roll;
    impl_advance_n_days(s, &roll)
}

#[derive(Deserialize)]
pub struct SubKwargs {
    holidays: Vec<i32>,
}

#[polars_expr(output_type=Int32)]
fn sub(inputs: &[Series],
    kwargs: BusinessDayKwargs,
) -> PolarsResult<Series> {
    let begin_dates = &inputs[0];
    let end_dates = &inputs[1];
    // let holidays = kwargs.holidays;
    impl_sub(begin_dates, end_dates)
}
