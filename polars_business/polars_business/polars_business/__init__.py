from __future__ import annotations

import polars as pl
from polars.utils.udfs import _get_shared_lib_location
from datetime import date
import sys

lib = _get_shared_lib_location(__file__)

__version__ = "0.3.18"


@pl.api.register_expr_namespace("bdt")
class ExprBusinessDateTimeNamespace:
    """
    Business day functions.
    """

    def __init__(self, expr: pl.Expr):
        self._expr = expr

    def offset_by(
        self,
        by: str,
        *,
        roll: RollStrategy = "raise",
    ):
        n: int | pl.Expr = int(by[:-2])
        result = self._expr.register_plugin(
            lib=lib,
            symbol="advance_n_days",
            is_elementwise=True,
            args=[n],
            kwargs={
                "holidays": [],
                "roll": roll,
            },
        )
        return result

    def sub(
        self,
        end_dates: str | pl.Expr,
        *,
        holidays: Sequence[date] | None = None,
    ):
        holidays_int = sorted(
            {(holiday - date(1970, 1, 1)).days for holiday in holidays}
        )
        result = self._expr.register_plugin(
            lib=lib,
            symbol="sub",
            is_elementwise=True,
            args=[end_dates],
            kwargs={
                "holidays": holidays_int,
            },
        )
        return result
