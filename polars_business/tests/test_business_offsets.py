from __future__ import annotations
import gc
import random

import datetime as dt
from datetime import date, timedelta
import pytest

import hypothesis.strategies as st
from hypothesis import given

import polars as pl
import polars_business as plb  # noqa


def test_invalid_roll_strategy() -> None:
    df = pl.DataFrame(
        {"date": [dt.date(2023, 1, 1)]}
    )
    with pytest.raises(pl.ComputeError):
        df.with_columns(pl.col("date").bdt.offset_by("1bd", roll="cabbage"))  # type: ignore[arg-type]

def get_result(
    start_date: dt.date | pl.Series,
    end_date: dt.date,
    holidays: list[dt.date],
) -> int:
    return (  # type: ignore[no-any-return]
        pl.DataFrame({"end_date": [end_date]})
        .select(n=pl.col("end_date").bdt.sub(start_date, holidays=holidays))["n"]  # type: ignore[arg-type]
        .item()
    )


def test_against_np_busday_count(
    # start_date: dt.date,
    # end_date: dt.date,
    # holidays: list[dt.date],
) -> None:
    for _ in range(200):
        start_date = dt.date(2000, 9, 21)
        end_date = dt.date(2000, 6, 11)
        holidays = random.choices(
            [date(2000, 1, 1) + timedelta(days=i) for i in range(365)],
            k=random.randint(0, 300),
        )
        result = get_result(
            start_date, end_date, holidays=holidays
        )
